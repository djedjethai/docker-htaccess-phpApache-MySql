/*
0-600px: phone
600-900px: tablet portrait
900-1200px: tablet landscape
[1200-1800] our actual code
1800px ++ big desktop

$breackpoint argument choices:
- phone
- tab-port
- tab-land
- big-desktop
*/
/* universal selector will select all elements on the page and apply it to them. to prevent pre-setting of the differents browser.
Like it s the same for all*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /*by default box-sizing do not herite. but setting up the all page like it will make it everywhere*/
  box-sizing: inherit; }

/*html element is the root font-size. so set it up, and then we use rem with all other font-size
(like this we can modify this one, and all get modify)*/
html {
  /*10px to make it easy ! as 1rem is root's font-size * rem. So 1rem will be 10px.
    But we don t want it in px bc it will lock the screen of the user: if he want to agrandir, il ne pourra plus, donc
    on convertir en %. 100% = 16px dc 62.5% = 10px*/
  font-size: 62.5%;
  /*@include respond(phone) {
        font-size: 50%; // we want 1rem to be 8px, so 8/16 = 50%
    }*/ }
  @media only screen and (max-width: 75em) {
    html {
      font-size: 56.25%; } }
  @media only screen and (max-width: 56.25em) {
    html {
      font-size: 50%; } }
  @media only screen and (min-width: 112.5em) {
    html {
      font-size: 80%; } }

body {
  box-sizing: border-box;
  padding: 3rem; }
  @media only screen and (max-width: 56.25em) {
    body {
      padding: 0; } }

/*setting it here will make it available for the all doc, via l'heritage*/
/*we can use the animation created on any object*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /*on pourrait aussi mettre des etapes/pourcentage intermediare*/
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/*make the button coming from the bottom*/
@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    /*the pb here, is that this animation start with a delay, so the opacity 1 occur with delay as well...
        pr palier a ca on utilise: animation-fill-mode: backwards; see the button effect below*/
    opacity: 1;
    transform: translateY(0); } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  /*predefine the line-height 1.7 fois bigger than the default one*/
  color: #777;
  /*so from here all the child class of the doc herite de border-box*/
  box-sizing: border-box;
  font-size: 1.6rem; }

.navbar {
  font-size: 1.6rem;
  min-height: 6rem;
  background-color: blue; }

.navbar-light .navbar-nav .nav-link {
  color: white !important; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.heading-primary {
  color: #ffb900;
  text-transform: uppercase;
  /*to stop potentiel shaking on anumation, we add this ligne*/
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /*to validate the @keyframes animation, we need this 2 lines*/
    animation-name: moveInLeft;
    animation-duration: 2s;
    /*accelere ou ralentit le debut ou la fin, ou alterne ease-in-out*/
    animation-timing-function: ease-out;
    /*set a delay before the animation start
        animation-delay: 3s;
        repeat an animation few times
        animation-iteration-count: 3;*/ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /*write it on one line to be faster*/
    animation: moveInRight 2s ease-out; }

.u-center-text {
  text-align: center !important; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }
  @media only screen and (max-width: 56.25em) {
    .u-margin-bottom-medium {
      margin-bottom: 3rem !important; } }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }

.u-margin-top-big {
  margin-top: 8rem !important; }
  @media only screen and (max-width: 56.25em) {
    .u-margin-top-big {
      margin-bottom: 5rem !important; } }

.u-margin-top-huge {
  margin-top: 10rem !important; }

.btn {
  min-height: 4rem;
  font-size: 1.8rem !important; }
  .btn-success {
    background-color: #ff7730 !important; }

.row {
  max-width: 114rem;
  margin: 0 auto;
  /*means Except the last child (so this margin-bottom will be apply to all children except the last one)*/ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
    @media only screen and (max-width: 56.25em) {
      .row:not(:last-child) {
        margin-bottom: 6rem; } }
  @media only screen and (max-width: 56.25em) {
    .row {
      max-width: 50rem;
      padding: 0 3rem; } }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
      @media only screen and (max-width: 56.25em) {
        .row [class^="col-"]:not(:last-child) {
          margin-right: 0;
          margin-bottom: 6rem; } }
    @media only screen and (max-width: 56.25em) {
      .row [class^="col-"] {
        width: 100% !important; } }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 6rem * 2) /3); }
  .row .col-1-of-4 {
    width: calc((100% - 6rem * 3) /4); }
  .row .col-2-of-4 {
    width: calc((100% - 6rem) /2); }
  .row .col-2-of-3 {
    width: calc((2 * (100% - 6rem * 2) /3) + 6rem); }
  .row .col-3-of-4 {
    width: calc((3 * (100% - 6rem * 3) /4) + 2 * 6rem); }

.navbar {
  min-height: 8rem;
  background-color: #5643fa;
  font-size: 1.8rem; }

.navbar-light .navbar-nav .nav-link {
  color: #fff !important; }

.dropUl {
  /*margin: 0px, 30px, 0px, 0px;*/
  padding: 0;
  list-style: none;
  background: #e3f2fd;
  text-align: left; }

.dropUl .dropLi {
  display: inline-block;
  position: relative;
  line-height: 21px; }

.dropUl .dropLi .dropA {
  display: block;
  /*min-width: 150px;*/
  padding: 8px 25px;
  color: #333;
  text-decoration: none; }

.dropUl .dropLi .dropA:hover {
  color: #777;
  background: #e3f2fd; }

.dropUl .dropLi .dropdown {
  min-width: 100%;
  /* Set width of the dropdown */
  background: #f2f2f2;
  display: none;
  position: absolute;
  z-index: 999;
  left: 0;
  list-style: none;
  margin: 0;
  padding: 0;
  box-shadow: 0 2.8px 2.2px rgba(0, 0, 0, 0.034), 0 6.7px 5.3px rgba(0, 0, 0, 0.048), 0 12.5px 10px rgba(0, 0, 0, 0.06), 0 22.3px 17.9px rgba(0, 0, 0, 0.072), 0 41.8px 33.4px rgba(0, 0, 0, 0.086), 0 100px 80px rgba(0, 0, 0, 0.12); }

.dropUl .dropLi:hover .dropdown {
  display: block;
  /* Display the dropdown */ }

.dropUl .dropLi .dropdown .dropLi {
  display: block; }

.dropUl .dropLi .dropdown .dropLi .dropA:hover {
  color: #fff;
  background: #939393; }

footer {
  font-size: 1.8rem;
  color: #fff;
  background-color: #5643fa; }

.header {
  /*95% of the view port point*/
  height: 40vh;
  background: linear-gradient(#5643fa, rgba(41, 152, 255, 0.801));
  /*what ever the view port, cover will always try to fit the elmt inside the box*/
  background-size: cover;
  /*fix the backGr at the top*/
  background-position: top;
  position: relative; }
  .header__text-box {
    text-align: center;
    position: absolute;
    /*40% and 50% from the parent element*/
    top: 50%;
    left: 50%;
    /*readjust l'alignement x et y par rapport l'element lui-meme*/
    transform: translate(-50%, -50%); }

.logo:hover {
  animation: moveInRight 2s ease-out; }

.btn {
  /*!!! ici on part du :hover . Donc le -1 aura un effet de descendre*/ }
  .btn, .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.4rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /*to stop potentiel shaking on anumation, we add this ligne*/
    backface-visibility: hidden;
    /*transition is the simple way to create effects, all is to select all properties, and 2s for the time */
    transition: all .2s;
    /*as we want the ::after (which have a position:absolute) to refer to this element*/
    position: relative;
    font-size: 1.6rem;
    border: none;
    cursor: pointer;
    opacity: 1; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem white; }
    .btn:hover::after {
      /*grossit 1.5 fois. the simple one: transform: scale(1.5);
            more complexe:*/
      transform: scaleX(1.4) scaleY(1.6);
      /*that is the trick to fade something up*/
      opacity: 0; }
  .btn:focus, .btn:active {
    outline: none;
    transform: translateY(-1px);
    /*here is half of the hover value, as we clicked on it*/
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #7ed56f; }
  .btn::after {
    /*for this sudo effect, the content: and display: property have to appear, even empty*/
    content: '';
    /*as the btn is already a inline-block*/
    display: inline-block;
    /*pourcentage par rapport au parent donc au &*/
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /*this is the start of the effect link to &:hover::after*/
    transition: all .4s; }
  .btn--animated {
    /*last value is a start delay, so 0,75s*/
    animation: moveInButton .5s ease-out .75s;
    /*permet de palier au delay, d'initialiser le stade initial de depart d'animation sans delay.*/
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }
